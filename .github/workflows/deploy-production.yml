name: CI/CD for SSO Backend API

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4
      # Step 2: Setup Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.1
          cache: "npm"
      # Step 3: Create .env file
      - name: Create .env file
        run: echo "${{secrets.ENV_PRODUCTION_SSO}}" > .env
      # Step 4: Install dependencies
      - run: npm ci
      # Step 5: Login to docker hub
      - name: Login to docker hub
        run: docker login -u ${{secrets.DOCKER_USERNAME_SSO}} -p ${{secrets.DOCKER_PASSWORD_SSO}}
      # Step 6: Build backend Docker image
      - name: Build backend Docker image
        run: docker build -t ${{secrets.DOCKER_USERNAME_SSO}}/sso-backend-api:latest -f Dockerfile .
      # Step 7: Push backend Docker image to Docker Hub
      - name: Push backend Docker image
        run: docker push ${{secrets.DOCKER_USERNAME_SSO}}/sso-backend-api:latest
      # Step 8: Tag and push MySQL image (if customized)
      - name: Push MySQL image
        run: |
          docker pull mysql:5.7.40
          docker tag mysql:5.7.40 ${{secrets.DOCKER_USERNAME_SSO}}/db-mysql-sso:latest
          docker push ${{secrets.DOCKER_USERNAME_SSO}}/db-mysql-sso:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      # Step 1: Pull new image
      - name: Pull Image from docker hub
        run: sudo docker pull ${{secrets.DOCKER_USERNAME_SSO}}/sso-backend-api:latest
      # Step 2: Remove old container
      - name: Delete old container
        run: sudo docker rm -f sso-backend-api
      # Step 3: Start new container
      - name: Run docker container
        run: |
          sudo docker run -d -p 8080:8080 --name sso-backend-api ${{secrets.DOCKER_USERNAME_SSO}}/sso-backend-api
          sudo docker run -d -p 3306:3306 --name db-mysql-sso ${{secrets.DOCKER_USERNAME_SSO}}/db-mysql-sso
      # Step 4: Restart Nginx
      - name: Connect SSH and Restart Services
        run: sudo systemctl restart nginx
